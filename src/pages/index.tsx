import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Toaster } from "@/components/ui/toaster";
import { useToast } from "@/components/ui/use-toast";
import { useForm } from "@/hooks/useForm/useForm";
import { api } from "@/utils/api";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

export default function Home() {
  const [isPublic, setIsPublic] = useState(true);
  const router = useRouter();

  const { toast } = useToast();

  const createRoom = api.room.createRoom.useMutation();

  const createUser = api.user.createUser.useMutation();

  const form = useForm({
    initialState: {
      name: "",
      room: "",
    },
    validation: (inputs) => {
      const errors: typeof inputs = {
        name: "",
        room: "",
      };

      if (inputs.name.length < 5 || inputs.name.length > 30) {
        errors.name = "name should be longer than 5 or greater than 30";
      }

      if (inputs.room.length < 5 || inputs.room.length > 30) {
        errors.room = "room should be longer than 5 or greater than 30";
      }

      return errors;
    },
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    handleSubmit: async (inputs) => {
      await createUser
        .mutateAsync({ name: inputs.name, role: "admin" })
        .then(async (userData) => {
          localStorage.setItem("@me", userData.id);
          await createRoom
            .mutateAsync({
              isPublic,
              id: userData.id,
              roomName: inputs.room,
            })
            .then((roomData) => router.push(`/${roomData.id}`));
        });
    },
  });

  useEffect(() => {
    const error = router.query.error?.toString();

    if (error && error === "401") {
      toast({
        title: "Something bad happened",
        description: "This room is not public! :(",
      });
    }

    if (error && error === "404") {
      toast({
        title: "Something bad happened",
        description: "I did not found this room! :(",
      });
    }
  }, [router.query]);

  return (
    <>
      <Head>
        <title>Dev Planning</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-5">
        {/* eslint-disable-next-line tailwindcss/classnames-order */}
        <h1 className="text-logo font-bold text-main">Dev Planning</h1>

        <form
          onSubmit={form.onSubmit}
          className="grid w-96 items-center gap-4 max-sm:w-full max-sm:px-6"
        >
          <div className=" grid w-full items-center gap-1.5">
            <Label htmlFor="name">Name</Label>
            <Input
              value={form.inputs.name}
              onChange={form.handleChange}
              type="text"
              name="name"
              placeholder="Your best name"
            />
            {form.error?.name && (
              <span className="text-sm font-semibold text-red-500">
                {form.error.name}
              </span>
            )}
          </div>
          <div className=" grid w-full items-center gap-1.5">
            <Label htmlFor="name">Room's name</Label>
            <Input
              value={form.inputs.room}
              onChange={form.handleChange}
              type="text"
              name="room"
              placeholder="A funny room name"
            />
            {form.error?.room && (
              <span className="text-sm font-semibold text-red-500">
                {form.error.room}
              </span>
            )}
          </div>
          <div className="flex gap-2">
            <Switch
              name="isPublic"
              checked={isPublic}
              onCheckedChange={setIsPublic}
            />{" "}
            <span className="font-medium">This room is public?</span>
          </div>
          <Toaster />
          <Button
            disabled={createRoom.isLoading || createUser.isLoading}
            size="full"
          >
            Create Room
          </Button>
        </form>
      </main>
    </>
  );
}
