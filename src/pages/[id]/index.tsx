import { Navbar } from "@/components/ui/navbar";
import { Toaster } from "@/components/ui/toaster";
import { useToast } from "@/components/ui/use-toast";
import { api } from "@/utils/api";
import { type GetServerSideProps } from "next";
import { useEffect, useMemo, useState } from "react";
import { generateSSGHelper } from "@/server/helpers/ssg";
import Head from "next/head";
import { CardBoard } from "@/components/ui/cardBoard";
import { Button } from "@/components/ui/button";
import { useFibboStore } from "@/stores/useFibboStore";

interface PropTypes {
  id: string;
}

export default function Planning({ id }: PropTypes) {
  const [meId, setMeId] = useState<string | null>("");

  const resetFibboStore = useFibboStore((state) => state.resetFibbo);

  const { toast } = useToast();

  const ctx = api.useContext();

  useEffect(() => {
    setMeId(localStorage.getItem("@me"));
  }, []);

  const getUser = api.user.searchUser.useQuery({ id: meId! });
  const searchRoom = api.room.searchRoom.useQuery({ id });
  const removeUserRoom = api.room.removeUserRoom.useMutation({
    onSuccess: () => ctx.invalidate(),
    onError: (error) =>
      toast({
        title: "Something bad happened",
        description: error.message,
      }),
  });
  const updateFibbo = api.room.changeFibboUserRoom.useMutation({
    onSuccess: () => ctx.invalidate(),
    onError: (error) =>
      toast({
        title: "Something bad happened",
        description: error.message,
      }),
  });

  const resetFibbo = api.room.resetFibboRoom.useMutation({
    onSuccess: () => ctx.invalidate(),
    onError: (error) =>
      toast({
        title: "Something bad happened",
        description: error.message,
      }),
  });

  function removeUser(userToRemoveId: string) {
    removeUserRoom.mutate({ roomId: id, userToRemoveId, userAdminId: meId! });
  }

  function updateFibbonnacci(fibbo: string) {
    updateFibbo.mutate({
      fibbo,
      roomId: id,
      userId: meId!,
    });
  }

  function resetFibbonnacci() {
    resetFibbo.mutate({ roomId: id });
    resetFibboStore();
  }

  const findMe = useMemo(() => {
    return searchRoom.data?.users.find((user) => user.id === meId);
  }, [searchRoom.data]);

  // useEffect(() => {
  //   if(typeof window !== 'undefined') {
  //     const findUser = searchRoom.data?.users.find((user) => user.id === meId);
  //   console.log(findUser)
  //   if (!findUser) {
  //     void router.push(`${id}/join`);
  //   }
  //   }
  // }, [searchRoom.data]);

  return (
    <>
      <Head>
        <title>Dev Planning - {searchRoom.data?.name}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen w-full">
        <Toaster />
        <Navbar
          isAdmin={getUser.data?.role === "admin"}
          removeUser={removeUser}
          list={searchRoom.data?.users}
        />
        <div className="relative flex min-h-screen w-full items-center justify-center">
          <div className="rounded-md bg-main p-10">
            <Button onClick={resetFibbonnacci}>reset</Button>
          </div>
          {findMe && <CardBoard updateFibbonnacci={updateFibbonnacci} />}
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { id } = ctx.query;

  if (!id) {
    return {
      redirect: {
        destination: "/",
      },
      props: {},
    };
  }

  const ssg = generateSSGHelper();

  const result = await ssg.room.searchRoom.fetch({ id: id.toString() });
  console.log("result", result);
  // const trpc = appRouter.createCaller({ db });
  // const result = await trpc.room.searchRoom({ id: id?.toString() });

  // if (!result) {
  //   return {
  //     redirect: {
  //       destination: "/",
  //     },
  //     props: {},
  //   };
  // }

  // const userParsed = result.users.map((user) => {
  //   user.createdAt = user.createdAt.toString() as unknown as string;
  // });

  return {
    props: {
      id: id.toString(),
      // trpcState: ssg.dehydrate(),
    },
  };
};
