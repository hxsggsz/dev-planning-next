import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useForm } from "@/hooks/useForm/useForm";
import { api } from "@/utils/api";
import { type GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";

interface PropTypes {
  id: string;
}

export default function Planning({ id }: PropTypes) {
  const router = useRouter();

  const searchRoom = api.room.searchRoom.useQuery({ id });
  const addUserRoom = api.room.addUserRoom.useMutation({
    onSuccess: async () => {
      await router.push(`/${id}`);
    },
  });

  const createUser = api.user.createUser.useMutation();

  const form = useForm({
    initialState: {
      name: "",
    },
    validation: (inputs) => {
      const errors: typeof inputs = {
        name: "",
      };

      if (inputs.name.length < 5 || inputs.name.length > 30) {
        errors.name = "name should be longer than 5 or greater than 30";
      }

      const findUsers = searchRoom.data?.users.find(
        (user) => user.name === inputs.name,
      );

      if (findUsers) {
        errors.name = "Name already exists on this room";
      }

      return errors;
    },
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    handleSubmit: async (inputs) => {
      await createUser
        .mutateAsync({ name: inputs.name, role: "user" })
        .then((userData) => {
          localStorage.setItem("@me", userData.id);
          addUserRoom.mutate({ roomId: id, userId: userData.id });
        });
    },
  });

  return (
    <>
      <Head>
        <title>Dev Planning - Join</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-5">
        {/* eslint-disable-next-line tailwindcss/classnames-order */}
        <h1 className="text-logo font-bold text-main">Dev Planning</h1>

        <form
          onSubmit={form.onSubmit}
          className="grid w-96 items-center gap-4 max-sm:w-full max-sm:px-6"
        >
          <div className=" grid w-full items-center gap-1.5">
            <Label htmlFor="name">Name</Label>
            <Input
              value={form.inputs.name}
              onChange={form.handleChange}
              type="text"
              name="name"
              placeholder="Your best name"
            />
            {form.error?.name && (
              <span className="text-sm font-semibold text-red-500">
                {form.error.name}
              </span>
            )}
          </div>

          <Button size="full">Create Room</Button>
        </form>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { id } = ctx.query;

  if (!id) {
    return {
      redirect: {
        destination: "/",
      },
      props: {},
    };
  }

  return {
    props: {
      id: id.toString(),
    },
  };
};
